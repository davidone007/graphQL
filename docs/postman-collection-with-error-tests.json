{
  "info": {
    "name": "NestJS GraphQL API Tests with Error Cases",
    "description": "Collection completa con tests de happy paths y unhappy paths para validar manejo de errores",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3001/graphql",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "project_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_to_delete_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "regular_user_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🔐 Authentication",
      "item": [
        {
          "name": "Login Admin User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation LoginUser($input: LoginInput!) {\\n  login(loginInput: $input) {\\n    accessToken\\n    user {\\n      id\\n      email\\n      firstName\\n      lastName\\n      fullName\\n      role\\n      isActive\\n      createdAt\\n    }\\n  }\\n}\",\n  \"variables\": {\n    \"input\": {\n      \"email\": \"admin@example.com\",\n      \"password\": \"admin123\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "if (response.data?.login?.accessToken) {",
                  "    pm.collectionVariables.set('jwt_token', response.data.login.accessToken);",
                  "    pm.collectionVariables.set('admin_token', response.data.login.accessToken);",
                  "    pm.collectionVariables.set('user_id', response.data.login.user.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login Regular User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation LoginUser($input: LoginInput!) {\\n  login(loginInput: $input) {\\n    accessToken\\n    user {\\n      id\\n      email\\n      firstName\\n      lastName\\n      fullName\\n      role\\n      isActive\\n      createdAt\\n    }\\n  }\\n}\",\n  \"variables\": {\n    \"input\": {\n      \"email\": \"user@example.com\",\n      \"password\": \"user123\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "if (response.data?.login?.accessToken) {",
                  "    pm.collectionVariables.set('regular_user_token', response.data.login.accessToken);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "❌ Authentication Error Tests",
      "item": [
        {
          "name": "Register with Invalid Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation RegisterUser($input: CreateUserInput!) {\\n  register(createUserInput: $input) {\\n    accessToken\\n    user {\\n      id\\n      email\\n      firstName\\n      lastName\\n      role\\n    }\\n  }\\n}\",\n  \"variables\": {\n    \"input\": {\n      \"email\": \"invalid-email\",\n      \"firstName\": \"Test\",\n      \"lastName\": \"User\",\n      \"password\": \"password123\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Should return validation error for invalid email', function () {",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                  "    const errorMessage = response.errors[0].message.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => msg.includes('email') || msg.includes('validation'));",
                  "});",
                  "",
                  "pm.test('Should not return access token', function () {",
                  "    pm.expect(response.data).to.be.null;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register with Weak Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation RegisterUser($input: CreateUserInput!) {\\n  register(createUserInput: $input) {\\n    accessToken\\n    user {\\n      id\\n      email\\n      firstName\\n      lastName\\n      role\\n    }\\n  }\\n}\",\n  \"variables\": {\n    \"input\": {\n      \"email\": \"weak-password@example.com\",\n      \"firstName\": \"Test\",\n      \"lastName\": \"User\",\n      \"password\": \"123\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Should return validation error for weak password', function () {",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                  "    const errorMessage = response.errors[0].message.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => msg.includes('password') || msg.includes('validation'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register Duplicate Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation RegisterUser($input: CreateUserInput!) {\\n  register(createUserInput: $input) {\\n    accessToken\\n    user {\\n      id\\n      email\\n      firstName\\n      lastName\\n      role\\n    }\\n  }\\n}\",\n  \"variables\": {\n    \"input\": {\n      \"email\": \"admin@example.com\",\n      \"firstName\": \"Duplicate\",\n      \"lastName\": \"User\",\n      \"password\": \"password123\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Should return error for duplicate email', function () {",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                  "    const errorMessage = response.errors[0].message.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => msg.includes('already exists') || msg.includes('duplicate') || msg.includes('email'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login with Wrong Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation LoginUser($input: LoginInput!) {\\n  login(loginInput: $input) {\\n    accessToken\\n    user {\\n      id\\n      email\\n      firstName\\n      lastName\\n      role\\n    }\\n  }\\n}\",\n  \"variables\": {\n    \"input\": {\n      \"email\": \"admin@example.com\",\n      \"password\": \"wrong-password\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Should return authentication error', function () {",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                  "    const errorMessage = response.errors[0].message.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => msg.includes('invalid') || msg.includes('credentials') || msg.includes('unauthorized'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login with Non-existent Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation LoginUser($input: LoginInput!) {\\n  login(loginInput: $input) {\\n    accessToken\\n    user {\\n      id\\n      email\\n      firstName\\n      lastName\\n      role\\n    }\\n  }\\n}\",\n  \"variables\": {\n    \"input\": {\n      \"email\": \"nonexistent@example.com\",\n      \"password\": \"password123\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Should return authentication error', function () {",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                  "    const errorMessage = response.errors[0].message.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => msg.includes('invalid') || msg.includes('not found') || msg.includes('unauthorized'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🚫 Authorization Error Tests",
      "item": [
        {
          "name": "Access Protected Route Without Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetAllUsers {\\n  users {\\n    id\\n    email\\n    firstName\\n    lastName\\n    role\\n  }\\n}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Should return unauthorized error', function () {",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                  "    const errorMessage = response.errors[0].message.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => msg.includes('unauthorized') || msg.includes('token') || msg.includes('authentication'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Access with Invalid Token",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "invalid.jwt.token",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetMe {\\n  me {\\n    id\\n    email\\n    firstName\\n    lastName\\n    role\\n  }\\n}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Should return unauthorized error for invalid token', function () {",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                  "    const errorMessage = response.errors[0].message.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => msg.includes('unauthorized') || msg.includes('invalid') || msg.includes('token') || msg.includes('jwt'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Regular User Tries to Delete User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{regular_user_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation DeleteUser($id: ID!) {\\n  removeUser(id: $id)\\n}\",\n  \"variables\": {\n    \"id\": \"{{user_id}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Should return forbidden error for insufficient permissions', function () {",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                  "    const errorMessage = response.errors[0].message.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => msg.includes('forbidden') || msg.includes('permission') || msg.includes('role') || msg.includes('admin') || msg.includes('unauthorized'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "⚠️ Validation Error Tests",
      "item": [
        {
          "name": "Get User with Invalid ID Format",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetUser($id: ID!) {\\n  user(id: $id) {\\n    id\\n    email\\n    firstName\\n    lastName\\n    role\\n  }\\n}\",\n  \"variables\": {\n    \"id\": \"invalid-id-format\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Should return error for invalid ID format', function () {",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                  "    const errorMessage = response.errors[0].message.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => msg.includes('not found') || msg.includes('invalid') || msg.includes('id'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Project with Invalid Data",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation CreateProject($input: CreateProjectInput!) {\\n  createProject(createProjectInput: $input) {\\n    id\\n    name\\n    description\\n    status\\n  }\\n}\",\n  \"variables\": {\n    \"input\": {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"status\": \"invalid-status\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Should return validation error for invalid project data', function () {",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                  "    const errorMessage = response.errors[0].message.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => msg.includes('validation') || msg.includes('invalid') || msg.includes('status') || msg.includes('name') || msg.includes('required'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🔍 Edge Cases Tests",
      "item": [
        {
          "name": "SQL Injection Attempt in Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation LoginUser($input: LoginInput!) {\\n  login(loginInput: $input) {\\n    accessToken\\n    user {\\n      id\\n      email\\n      firstName\\n      lastName\\n      role\\n    }\\n  }\\n}\",\n  \"variables\": {\n    \"input\": {\n      \"email\": \"admin@example.com'; DROP TABLE users; --\",\n      \"password\": \"password123\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Should handle SQL injection attempt safely', function () {",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                  "    pm.expect(response.data).to.be.null;",
                  "});",
                  "",
                  "pm.test('Application should not crash', function () {",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Special Characters in Input",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation CreateProject($input: CreateProjectInput!) {\\n  createProject(createProjectInput: $input) {\\n    id\\n    name\\n    description\\n    status\\n  }\\n}\",\n  \"variables\": {\n    \"input\": {\n      \"name\": \"Project with 特殊字符 🚀 & symbols <script>alert('xss')</script>\",\n      \"description\": \"Description with émojis 🎉 and spëcial charâcters\",\n      \"status\": \"active\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Should handle special characters safely', function () {",
                  "    if (response.data && response.data.createProject) {",
                  "        pm.expect(response.data.createProject.id).to.be.a('string');",
                  "        pm.expect(response.data.createProject.name).to.be.a('string');",
                  "        console.log('✅ Special characters handled properly');",
                  "    } else if (response.errors) {",
                  "        pm.expect(response.errors).to.be.an('array');",
                  "        console.log('⚠️ Special characters rejected by validation');",
                  "    }",
                  "});",
                  "",
                  "pm.test('No XSS vulnerability', function () {",
                  "    const responseText = JSON.stringify(response);",
                  "    pm.expect(responseText).to.not.include('<script>');",
                  "    pm.expect(responseText).to.not.include('alert(');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "👥 Users Management (Happy Path)",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetAllUsers {\\n  users {\\n    id\\n    email\\n    firstName\\n    lastName\\n    fullName\\n    role\\n    isActive\\n    createdAt\\n    updatedAt\\n    projects {\\n      id\\n      name\\n      status\\n    }\\n  }\\n}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Users array returned', function () {",
                  "    pm.expect(response.data.users).to.be.an('array');",
                  "    pm.expect(response.data.users.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('User structure is correct', function () {",
                  "    const user = response.data.users[0];",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('firstName');",
                  "    pm.expect(user).to.have.property('lastName');",
                  "    pm.expect(user).to.have.property('role');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Current User (Me)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetMe {\\n  me {\\n    id\\n    email\\n    firstName\\n    lastName\\n    fullName\\n    role\\n    isActive\\n    createdAt\\n    projects {\\n      id\\n      name\\n      description\\n      status\\n      createdAt\\n    }\\n  }\\n}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          }
        }
      ]
    },
    {
      "name": "📁 Projects Management (Happy Path)",
      "item": [
        {
          "name": "Create Project",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation CreateProject($input: CreateProjectInput!) {\\n  createProject(createProjectInput: $input) {\\n    id\\n    name\\n    description\\n    status\\n    ownerId\\n    createdAt\\n    owner {\\n      id\\n      firstName\\n      lastName\\n      email\\n    }\\n  }\\n}\",\n  \"variables\": {\n    \"input\": {\n      \"name\": \"Proyecto de Prueba API\",\n      \"description\": \"Este es un proyecto creado desde Postman para testing\",\n      \"status\": \"active\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Project created successfully', function () {",
                  "    pm.expect(response.data.createProject.id).to.be.a('string');",
                  "    pm.expect(response.data.createProject.name).to.eql('Proyecto de Prueba API');",
                  "    pm.expect(response.data.createProject.status).to.eql('active');",
                  "});",
                  "",
                  "if (response.data?.createProject?.id) {",
                  "    pm.collectionVariables.set('project_id', response.data.createProject.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Projects",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetAllProjects {\\n  projects {\\n    id\\n    name\\n    description\\n    status\\n    ownerId\\n    createdAt\\n    updatedAt\\n    owner {\\n      id\\n      firstName\\n      lastName\\n      email\\n      role\\n    }\\n  }\\n}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          }
        }
      ]
    }
  ]
}
